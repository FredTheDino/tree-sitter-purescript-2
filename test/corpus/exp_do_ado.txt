================================================================================
Do-notation
================================================================================

f = do
  pure 1

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_do
      (statement
        (exp_apply
          (exp_name
            (variable))
          (exp_literal
            (integer)))))))

================================================================================
Do-notation, bind-binders
================================================================================

f = do
  a <- b
  C d <- f
  G h i <- j
  pure 1

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_do
      (statement
        (bind_pattern
          (pat_name
            (variable))
          (exp_name
            (variable))))
      (statement
        (bind_pattern
          (pat_apply
            (pat_name
              (constructor))
            (pat_name
              (variable)))
          (exp_name
            (variable))))
      (statement
        (bind_pattern
          (pat_apply
            (pat_name
              (constructor))
            (pat_name
              (variable))
            (pat_name
              (variable)))
          (exp_name
            (variable))))
      (statement
        (exp_apply
          (exp_name
            (variable))
          (exp_literal
            (integer)))))))

================================================================================
Do-notation, let-binders
================================================================================

f = do
  let a = b
  let C d = f
  let G h i = j
  pure 1

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_do
      (statement
        (let
          (declarations
            (function
              name: (variable)
              rhs: (exp_name
                (variable))))))
      (statement
        (let
          (declarations
            (function
              pattern: (pat_apply
                (pat_name
                  (constructor))
                (pat_name
                  (variable)))
              rhs: (exp_name
                (variable))))))
      (statement
        (let
          (declarations
            (function
              pattern: (pat_apply
                (pat_name
                  (constructor))
                (pat_name
                  (variable))
                (pat_name
                  (variable)))
              rhs: (exp_name
                (variable))))))
      (statement
        (exp_apply
          (exp_name
            (variable))
          (exp_literal
            (integer)))))))

================================================================================
Do-notation, nested do-notation
================================================================================

f = do
  do
    pure 1

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_do
      (statement
        (exp_do
          (statement
            (exp_apply
              (exp_name
                (variable))
              (exp_literal
                (integer)))))))))

================================================================================
Ado-notation
================================================================================

f = ado
  in []

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_ado
      in: (exp_array))))

================================================================================
Ado-notation, bind-binders
================================================================================

f = ado
  a <- b
  C d <- f
  G h i <- j
  in []

--------------------------------------------------------------------------------

(purescript
  (function
    name: (variable)
    rhs: (exp_ado
      (statement
        (bind_pattern
          (pat_name
            (variable))
          (exp_name
            (variable))))
      (statement
        (bind_pattern
          (pat_apply
            (pat_name
              (constructor))
            (pat_name
              (variable)))
          (exp_name
            (variable))))
      (statement
        (bind_pattern
          (pat_apply
            (pat_name
              (constructor))
            (pat_name
              (variable))
            (pat_name
              (variable)))
          (exp_name
            (variable))))
      in: (exp_array))))

================================================================================
Ado-notation, let-binders
================================================================================

f = ado
  let a = b
  let C d = f
  let G h i = j
  in 1

--------------------------------------------------------------------------------

(purescript
  (function
    (variable)
    (exp_ado
      (statement
        (let
          (declarations
            (function
              (variable)
              (exp_name
                (variable))))))
      (statement
        (let
          (declarations
            (function
              (pat_apply
                (pat_name
                  (constructor))
                (pat_name
                  (variable)))
              (exp_name
                (variable))))))
      (statement
        (let
          (declarations
            (function
              (pat_apply
                (pat_name
                  (constructor))
                (pat_name
                  (variable))
                (pat_name
                  (variable)))
              (exp_name
                (variable))))))
      (exp_literal
        (integer)))))

================================================================================
Ado-notation, nested ado-notation
================================================================================

f = ado
  in ado
    in 1

--------------------------------------------------------------------------------

(purescript
  (function
    (variable)
    (exp_ado
      (exp_ado
        (exp_literal
          (integer))))))

================================================================================
Ado-notation, single line
================================================================================

f = ado [] in []
g = ado let a = [] in a

--------------------------------------------------------------------------------

(ERROR
  (variable)
  (statement
    (exp_array))
  (exp_apply
    (exp_array)
    (exp_name
      (variable)))
  (operator)
  (statement
    (let
      (declarations
        (function
          (variable)
          (exp_apply
            (exp_array)
            (exp_name
              (variable))
            (exp_name
              (variable))))))))
